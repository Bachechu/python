{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUfUv7csEVj6nA1GbOVait",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bachechu/python/blob/main/24.04.12%20%EC%88%98%EC%97%85%20%EC%8B%A4%EC%8A%B5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "pECTdf7B00NM"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "list는 파이썬의 내장 자료형 중 하나로, 가변(mutable)한 배열로 다양한 데이터 타입을 포함할 수 있음\n",
        "\n",
        "array는 넘파이 모듈에서 제공되며, 한가지 데이터 타입만 포함할 수 있음\n",
        "각 자료구조를 구분하는 방식이 다름\n",
        "    #  리스트(list): 순서가 있는 변경 가능한 항목의 컬렉션 • 예: [1, 2, 3, 'apple', 3.14]\n",
        "    #  튜플(Tuple): 순서가 있는 변경 불가능한 항목의 컬렉션 • 예: (1, 2, 3, 'apple', 3.14) => 데이터들 변경 불가\n",
        "    #  세트(Set): 순서가 없고 중복을 허용하지 않는 항목의 컬렉션 • 예: {1, 2, 3, 4}\n",
        "    #  딕셔너리(Dictionary): 키와 값의 쌍으로 구성된 항목의 컬렉션 • 예: {'name': 'John', 'age': 30, 'city': 'New York'}\n",
        "\n",
        "\n",
        "함수와 메소드의 차이점?\n",
        "함수와 메소드는 기능으로 작동한다는 것은 같지만, 함수는 독립적이고, 메소드는 클래스 또는 객체에 속해있음\n",
        "\n",
        "함수는 1. 내장함수, 2. 사용자정의함수로 나뉨\n",
        "\n",
        "함수 명이 나오고 괄호 안에 매개변수를 쓰는 것\n",
        "\n",
        "메소드는 객체의 이름 뒤에 점(.)을 사용하여 호출함.\n",
        "ex) 바보리스트.메소드(매개변수)\n",
        "\n",
        "1.1 리스트 사용법 : 리스트 생성, 데이터 추가, 삭제\n",
        "(1) 리스트 생성\n",
        "리스트 변수명 = [값1, 값2, 값3, … ]\n",
        "예시)\n",
        "a = [10, 20, 30, 40]\n",
        "a = [‘one’, ‘two’, ‘three’, ‘four’]\n",
        "a = [10, 20, ‘one’, ‘two’]\n",
        "a = [10, 20, [‘one’, ‘two’] ]\n",
        "▪ 초기값이 있는 리스트 생성\n",
        "\n",
        "(2) 리스트 활용하기\n",
        "x=[10,20,30,40]\n",
        "print(x)\n",
        "print(x[0],x[3]) ->  슬라이싱\n",
        "print(x[1:3])\n",
        "▪ 리스트 데이터 항목 사용\n",
        "f=[＂게임\",＂독서\"]\n",
        "print(f)\n",
        "f[0]=＂스포츠\"\n",
        "print(f)\n",
        "f[2]=＂음악\"\n",
        "▪ 리스트 항목값 변경\n",
        "IndexError: list assignment index out of range\n"
      ],
      "metadata": {
        "id": "I52fBT8g6zVc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "개설과목 = ['컴퓨터','파이썬','인공지능']\n",
        "if '파이썬' in 개설과목:\n",
        "  print('파이썬 과목이 개설 되었습니다.')\n",
        "for 과목 in 개설과목:\n",
        "  print(과목, end=' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MLNXJKt450DD",
        "outputId": "fc1d7b6a-409b-4b0e-e187-379ec844cb1b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "파이썬 과목이 개설 되었습니다.\n",
            "컴퓨터 파이썬 인공지능 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fruits=[\"banana\", \"apple\",\"orange\",\"cherry\"]\n",
        "print(fruits)\n",
        "print(fruits[1])\n",
        "\n",
        "numbers=[10,20,30,40,50]\n",
        "print(numbers[-1]) #마지막 요소는 -1로\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oNRl5LCa5zUe",
        "outputId": "699bdcbd-70a4-4e16-f21d-a2d170f8fe48"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['banana', 'apple', 'orange', 'cherry']\n",
            "apple\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fruits=[\"banana\", \"apple\",\"orange\"]\n",
        "print(fruits)\n",
        "fruits[0]=\"grape\"\n",
        "print(fruits)\n",
        "fruits.insert(3,\"strawberry\")\n",
        "print(fruits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ylNBUUeODkLb",
        "outputId": "772a8422-a5ef-4bfa-e738-14c501d3e8e2"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['banana', 'apple', 'orange']\n",
            "['grape', 'apple', 'orange']\n",
            "['grape', 'apple', 'orange', 'strawberry']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers=[10,20,30,40,50]\n",
        "print(numbers)\n",
        "numbers.remove(30)\n",
        "print(numbers)\n",
        "print(len(numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTw3b8ScE6fL",
        "outputId": "b4c18791-ba3b-4f8c-91ef-57671adad00b"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10, 20, 30, 40, 50]\n",
            "[10, 20, 40, 50]\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers=[10,5,8,3,15]\n",
        "print(max(numbers))\n",
        "print(min(numbers))\n",
        "print(sum(numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "akGY70otFYGB",
        "outputId": "a356245a-6b51-4843-ddbf-097821d297fc"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n",
            "3\n",
            "41\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fruits=[\"banana\", \"apple\",\"orange\",\"apple\"] #apple의 개수를 구하라\n",
        "print(\"사과의 개수는\",fruits.count(\"apple\"),\"개\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GuCKaSehFl7U",
        "outputId": "299b63df-bc78-47a3-a662-b2eac09ecb69"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "사과의 개수는 2 개\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#다음 리스트의 모든 요소를 제곱해 새로운 리스트를 생성하라\n",
        "numbers=[10,20,30,40,50]\n",
        "newlist=[]\n",
        "for num in numbers:\n",
        "  newlist.append(num**2)\n",
        "print(newlist)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WGejMzdQGJIz",
        "outputId": "065d51fa-6a7e-407e-a5aa-68315d30d1fd"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[100, 400, 900, 1600, 2500]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def square(x):\n",
        "  result= x**2\n",
        "  return result"
      ],
      "metadata": {
        "id": "AIDtaJ4rG_SR"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ret=square(6)\n",
        "print(ret)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GoUX7_dMLpQg",
        "outputId": "b5e4b04e-18ed-42ba-d425-eabe2d5f1b64"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "36\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(square(6))\n",
        "print(square(1))\n",
        "print(square(59))\n",
        "print(square(1258))\n",
        "print(square(125892))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "evP37avGMED7",
        "outputId": "54957862-f618-4a35-95cc-1f082d9c396a"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "36\n",
            "1\n",
            "3481\n",
            "1582564\n",
            "15848795664\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#다음 리스트의 모든 요소를 제곱해 새로운 리스트를 생성하라\n",
        "numbers=[10,20,30,40,50]\n",
        "newlist=square([10,20,30,40,50])\n",
        "print(newlist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "J_hV8H1IMI9D",
        "outputId": "fc21752c-cc98-4e6f-806e-a35074019a37"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for ** or pow(): 'list' and 'int'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-5fec48580ae5>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#다음 리스트의 모든 요소를 제곱해 새로운 리스트를 생성하라\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mnewlist\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-54-04b4ecbab00e>\u001b[0m in \u001b[0;36msquare\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mresult\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'list' and 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def square2(numbers):\n",
        "  newlist=[]\n",
        "  for num in numbers:\n",
        "    newlist.append(num**2)\n",
        "  return newlist"
      ],
      "metadata": {
        "id": "F9eDD1GxN-F_"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#다음 리스트의 모든 요소를 제곱해 새로운 리스트를 생성하라\n",
        "new=square2([10,20,30,40,50])\n",
        "print(new)\n",
        "\n",
        "numbers=[10,5,8,3,15]\n",
        "new2=square2(numbers)\n",
        "print(new2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FsathBh_OUZv",
        "outputId": "72dd7698-668a-411c-86d4-23b0c1ed60fa"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[100, 400, 900, 1600, 2500]\n",
            "[100, 25, 64, 9, 225]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def BMI(h, w):\n",
        "    height_m = h / 100  # cm를 m로 변환\n",
        "    bmi = w / (height_m ** 2)\n",
        "    return bmi"
      ],
      "metadata": {
        "id": "NGbs1H8fOb6f"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "결과=BMI(190,90)\n",
        "print(결과)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJM5AQGXPwrp",
        "outputId": "edfd75cb-aee8-4f72-d51a-248e493e3c3f"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24.930747922437675\n"
          ]
        }
      ]
    }
  ]
}